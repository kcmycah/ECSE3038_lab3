"""
if we didnt say from flask import flask then we would have to write app = flask.flask(__name__)

Types of Databases:
-------------------
MongoDB: The shape of the objects do not matter, it could be different shapes
InfluxDb: Stores data based on the time it was put in the database

"""
#import certifi
from unittest import result
from flask import Flask, request, jsonify
from flask_pymongo import PyMongo
from marshmallow import Schema, fields
from bson.json_util import dumps
from json import loads
import os
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.config["MONGO_URI"] = os.getenv("MONGO_CONNECTION_STRING")
mongo = PyMongo(app) #creates an instance of PyMongo object

class FruitSchema(Schema):
  name = fields.String(required=True)
  sugar_content = fields.Integer(required=True)
  colour = fields.String(required=True)
  calories = fields.Integer(required=True)

@app.route("/fruit", methods=["POST"])
def addNewFruit():
  request_dict = request.json
  new_fruit = FruitSchema().load(request_dict)
  fruit_document = mongo.db.fruits.insert_one(new_fruit)
  fruit_id = fruit_document.inserted_id

  fruit = mongo.db.fruits.find_one({"_id": fruit_id})

  fruit_json = loads(dumps(fruit))

  return jsonify(fruit_json)

@app.route("/fruit")
def getFruits():
  fruits = mongo.db.fruits.find()
  fruits_list = loads(dumps(fruits))
  return jsonify(fruits_list)

@app.route("/fruit/<ObjectId:id>", methods = ["PATCH"])
def updateFruits(id):
  mongo.db.fruits.update_one({"_id": id}, {"$set": request.json})#needs to match the object you're updating
  fruit = mongo.db.fruits.find_one(id)
  fruit_json = loads(dumps(fruit))
  return jsonify (fruit_json)

@app.route("/fruit/<ObjectId:id>", methods = ["DELETE"])
def deleteFruit(id):
  result = mongo.db.fruits.delete_one({"_id": id})

  if result.deleted_count == 1: 
    return{
      "success" : True
    }
  else:
    return{
      "success": False
    },400




if __name__ == '__main__':
  app.run(debug = True,port = 3000, host = "0.0.0.0" )